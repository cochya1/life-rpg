# app.py ‚Äî –ñ–∏–∑–Ω–µ–Ω–Ω–∞—è RPG (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)

# ---------- –ò–ú–ü–û–†–¢–´ ----------
import streamlit as st
import json
import os
import io
import pandas as pd

from datetime import datetime, date, timedelta
from zoneinfo import ZoneInfo
from collections import Counter
from datetime import time as dtime

def goal_due_datetime(goal) -> datetime:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π datetime –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–¥–∞—á–∏.
    –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äî —Å—á–∏—Ç–∞–µ–º 23:59:59 —ç—Ç–æ–≥–æ –¥–Ω—è.
    """
    dd: date = goal["due"]
    tstr = goal.get("time")
    if tstr:
        try:
            hh, mm = map(int, tstr.split(":"))
            return datetime.combine(dd, dtime(hh, mm))
        except Exception:
            pass
    return datetime.combine(dd, dtime(23, 59, 59))

# ---------- SUPABASE AUTH (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞) ----------
from supabase import create_client, Client

@st.cache_resource
def get_supabase() -> Client:
    url = st.secrets.get("SUPABASE_URL", "").strip()
    key = st.secrets.get("SUPABASE_ANON_KEY", "").strip()  # <-- –í–ê–ñ–ù–û: ANON
    if not (url.startswith("https://") and ".supabase.co" in url):
        st.error("‚ùó SUPABASE_URL –Ω–µ –∑–∞–¥–∞–Ω/–Ω–µ–≤–µ—Ä–Ω—ã–π (Manage app ‚Üí Settings ‚Üí Secrets).")
        st.stop()
    if not key:
        st.error("‚ùó SUPABASE_ANON_KEY –Ω–µ –∑–∞–¥–∞–Ω (Settings ‚Üí Secrets).")
        st.stop()
    return create_client(url, key)

supabase = get_supabase()

def auth_form():
    st.header("üîê –í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç")
    try:
        mode = st.segmented_control("–†–µ–∂–∏–º", ["–í–æ–π—Ç–∏", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"], key="auth_mode")
    except Exception:
        mode = st.radio("–†–µ–∂–∏–º", ["–í–æ–π—Ç–∏", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"], key="auth_mode_radio")

    email = st.text_input("Email", key="auth_email")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="auth_password")

    col1, col2 = st.columns(2)
    with col1:
        disabled = (mode != "–í–æ–π—Ç–∏") or (not email or not password)
        if st.button("–í–æ–π—Ç–∏", use_container_width=True, disabled=disabled):
            try:
                res = supabase.auth.sign_in_with_password({"email": email, "password": password})
                st.session_state.auth_user = res.user.model_dump()
                st.success("–ì–æ—Ç–æ–≤–æ! –í–æ—à–ª–∏.")
                st.rerun()
            except Exception as e:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏: {e}")

    with col2:
        disabled = (mode != "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è") or (not email or not password)
        if st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", use_container_width=True, disabled=disabled):
            try:
                res = supabase.auth.sign_up({"email": email, "password": password})
                st.session_state.auth_user = res.user.model_dump()
                st.success("–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω, –≤—ã –≤–æ—à–ª–∏.")
                st.rerun()
            except Exception as e:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è: {e}")

def current_user_id() -> str | None:
    """UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase Auth (–∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω)."""
    u = st.session_state.get("auth_user")
    if u and u.get("id"):
        return u["id"]
    # –ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é
    try:
        res = supabase.auth.get_user()
        if res and res.user:
            st.session_state.auth_user = res.user.model_dump()
            return res.user.id
    except Exception:
        pass
    return None

def logout_button():
    if st.sidebar.button("–í—ã–π—Ç–∏", use_container_width=True):
        try:
            supabase.auth.sign_out()
        except Exception:
            pass
        st.session_state.pop("auth_user", None)
        st.rerun()

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ===
user_id = current_user_id()
if not user_id:
    auth_form()   # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    st.stop()     # –¥–∞–ª—å—à–µ –∫–æ–¥ –Ω–µ –∏–¥—ë—Ç, –ø–æ–∫–∞ –Ω–µ –≤–æ–π–¥—ë–º

# –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –≤ —Å–∞–π–¥–±–∞—Ä–µ
logout_button()

# ---------- –•–†–ê–ù–ò–õ–ö–ê –í SUPABASE ----------
def db_save_state(user_id: str, data: dict):
    supabase.table("rpg_state").upsert({"user_id": user_id, "data": data}).execute()

def db_load_state(user_id: str) -> dict | None:
    res = supabase.table("rpg_state").select("data").eq("user_id", user_id).execute()
    if res.data:
        return res.data[0]["data"]
    return None

def save_state():
    user_id = current_user_id()
    if not user_id:
        return  # –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω ‚Äî –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    try:
        db_save_state(user_id, serialize_state())
    except Exception as e:
        st.sidebar.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É: {e}")

def load_state_if_exists() -> bool:
    user_id = current_user_id()
    if not user_id:
        return False
    try:
        data = db_load_state(user_id)
        if data:
            deserialize_state(data)
            return True
    except Exception as e:
        st.sidebar.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –±–∞–∑—ã: {e}")
    return False

# Altair –¥–ª—è –ø–æ–Ω—á–∏–∫–æ–≤—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º
import altair as alt

# ========================= –ë–ê–ó–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò =========================
st.set_page_config(page_title="–ñ–∏–∑–Ω–µ–Ω–Ω–∞—è RPG", page_icon="üéØ", layout="wide")
st.title("üéØ –ñ–∏–∑–Ω–µ–Ω–Ω–∞—è RPG")

STATE_FILE = "state.json"

GOAL_TYPES = {"–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è": 5, "–°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–∞—è": 25, "–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è": 70}
XP_PER_LEVEL = 1000
WEEKDAY_LABELS = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
CATEGORIES = ["–†–∞–±–æ—Ç–∞", "–õ–∏—á–Ω–æ–µ", "–°–µ–º—å—è", "–ü—Ä–æ—á–µ–µ", "–ü—Ä–æ–µ–∫—Ç—ã"]

HABIT_XP = 10

BIG_GOAL_XP = 250
BIG_GOAL_STAT_BONUS = 10

def award_big_goal_failure():
    """-250 XP –∏ -10 –∫–æ –≤—Å–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º –∑–∞ –ø—Ä–æ–≤–∞–ª –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ü–µ–ª–∏."""
    add_xp(-BIG_GOAL_XP)
    for k in list(st.session_state.stats.keys()):
        update_stat(k, -BIG_GOAL_STAT_BONUS)

# ========================= –£–¢–ò–õ–ò–¢–´ =========================
def days_left_text(due: date, time_str: str | None = None) -> str:
    """
    –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–æ –≤—Ä–µ–º—è ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—á–Ω–µ–µ (—Å–µ–≥–æ–¥–Ω—è/—á–µ—Ä–µ–∑ X —á–∞—Å–æ–≤/–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞ ...).
    –ë–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ –¥–Ω—è–º.
    """
    if time_str:
        try:
            hh, mm = map(int, time_str.split(":"))
            dt_due = datetime.combine(due, dtime(hh, mm))
        except Exception:
            dt_due = datetime.combine(due, dtime(23, 59, 59))
        delta = dt_due - datetime.now()
        s = int(delta.total_seconds())
        if s > 0:
            days = s // 86400
            if days > 0:
                return f"–æ—Å—Ç–∞–ª–æ—Å—å {days} –¥–Ω."
            hours = s // 3600
            if hours > 0:
                return f"—á–µ—Ä–µ–∑ {hours} —á."
            mins = max(1, (s % 3600) // 60)
            return f"—á–µ—Ä–µ–∑ {mins} –º–∏–Ω."
        else:
            s = -s
            days = s // 86400
            if days > 0:
                return f"–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞ {days} –¥–Ω."
            hours = s // 3600
            if hours > 0:
                return f"–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞ {hours} —á."
            mins = max(1, (s % 3600) // 60)
            return f"–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞ {mins} –º–∏–Ω."
    else:
        d = (due - date.today()).days
        if d > 0:
            return f"–æ—Å—Ç–∞–ª–æ—Å—å {d} –¥–Ω."
        if d == 0:
            return "—Å–µ–≥–æ–¥–Ω—è –¥–µ–¥–ª–∞–π–Ω"
        return f"–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞ {-d} –¥–Ω."

def classify_by_due(due: date) -> str:
    left = (due - date.today()).days
    if left <= 7:
        return "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è"
    elif left <= 92:
        return "–°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–∞—è"
    else:
        return "–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è"


def next_from_days(d: date, days: list[int]) -> date:
    if not days:
        return d + timedelta(days=7)
    for step in range(1, 8):
        cand = d + timedelta(days=step)
        if cand.weekday() in days:
            return cand
    return d + timedelta(days=7)


def compute_next_due(goal) -> date:
    mode = goal.get("recur_mode", "none")
    if mode == "daily":
        return goal["due"] + timedelta(days=1)
    elif mode == "weekly":
        return goal["due"] + timedelta(days=7)            
    elif mode == "by_days":
        return next_from_days(goal["due"], goal.get("recur_days", []))
    return goal["due"]

def _moscow_now() -> datetime:
    """–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ú–°–ö."""
    return datetime.now(ZoneInfo("Europe/Moscow"))

def _default_stats_dict():
    return {
        "–ó–¥–æ—Ä–æ–≤—å–µ ‚ù§Ô∏è": 0,
        "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç üß†": 0,
        "–†–∞–¥–æ—Å—Ç—å üôÇ": 0,
        "–û—Ç–Ω–æ—à–µ–Ω–∏—è ü§ù": 0,
        "–£—Å–ø–µ—Ö ‚≠ê": 0,
        "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ üéØ": 0.0,
    }

def export_year_report_xlsx(archive: dict, year: int) -> bytes:
    """
    –î–µ–ª–∞–µ—Ç Excel —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∑–∞ –≥–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ snapshot'–∞ archive (serialize_state()).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç bytes xlsx ‚Äî –∏—Ö —É–¥–æ–±–Ω–æ –æ—Ç–¥–∞–≤–∞—Ç—å —á–µ—Ä–µ–∑ st.download_button.
    """
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º —Ç–∞–±–ª–∏—Ü—ã
    # --- XP –ø–æ –¥–Ω—è–º
    xp_items = sorted([(k, int(v)) for k, v in archive.get("xp_log", {}).items()
                       if k.startswith(str(year) + "-")])
    df_xp = pd.DataFrame(xp_items, columns=["–î–∞—Ç–∞ (ISO)", "ŒîXP"]) if xp_items else pd.DataFrame(columns=["–î–∞—Ç–∞ (ISO)", "ŒîXP"])

    # --- –û–±—ã—á–Ω—ã–µ –∑–∞–¥–∞—á–∏
    goals = archive.get("goals", [])
    df_goals = pd.DataFrame(goals) if goals else pd.DataFrame(columns=[
        "title","due","type","category","done","failed","overdue","stat","recur_mode","recur_days"
    ])

    # --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏
    bgoals = archive.get("big_goals", [])
    df_big = pd.DataFrame(bgoals) if bgoals else pd.DataFrame(columns=["title","due","done","failed","note"])

    # --- –ü—Ä–∏–≤—ã—á–∫–∏
    habits = archive.get("habits", [])
    # —Ä–∞–∑–≤–µ—Ä–Ω—ë–º –≤ —É–¥–æ–±–Ω—ã–π –≤–∏–¥
    rows_h = []
    for h in habits:
        rows_h.append({
            "title": h.get("title",""),
            "days": ",".join(map(str, h.get("days",[]))),
            "stat": h.get("stat",""),
            "completions_count": len(h.get("completions",[])),
            "failures_count": len(h.get("failures",[])),
            "completions": ",".join(h.get("completions",[])),
            "failures": ",".join(h.get("failures",[])),
        })
    df_habits = pd.DataFrame(rows_h) if rows_h else pd.DataFrame(columns=[
        "title","days","stat","completions_count","failures_count","completions","failures"
    ])

    # --- –°–≤–æ–¥–∫–∞
    total_goals = len(goals)
    done_goals = sum(1 for g in goals if g.get("done"))
    failed_goals = sum(1 for g in goals if g.get("failed"))
    overdue_goals = sum(1 for g in goals if g.get("overdue"))

    total_big = len(bgoals)
    done_big = sum(1 for g in bgoals if g.get("done"))
    failed_big = sum(1 for g in bgoals if g.get("failed"))

    total_habits = len(habits)
    total_h_done = sum(len(h.get("completions",[])) for h in habits)
    total_h_fail = sum(len(h.get("failures",[])) for h in habits)

    df_summary = pd.DataFrame([
        {"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å":"–ì–æ–¥", "–ó–Ω–∞—á–µ–Ω–∏–µ": year},
        {"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å":"–í—Å–µ–≥–æ –∑–∞–¥–∞—á", "–ó–Ω–∞—á–µ–Ω–∏–µ": total_goals},
        {"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å":"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á", "–ó–Ω–∞—á–µ–Ω–∏–µ": done_goals},
        {"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å":"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ –∑–∞–¥–∞—á", "–ó–Ω–∞—á–µ–Ω–∏–µ": failed_goals},
        {"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å":"–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –∑–∞–¥–∞—á", "–ó–Ω–∞—á–µ–Ω–∏–µ": overdue_goals},
        {"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å":"–ì–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π –≤—Å–µ–≥–æ", "–ó–Ω–∞—á–µ–Ω–∏–µ": total_big},
        {"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å":"–ì–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", "–ó–Ω–∞—á–µ–Ω–∏–µ": done_big},
        {"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å":"–ì–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π –ø—Ä–æ–≤–∞–ª–µ–Ω–æ", "–ó–Ω–∞—á–µ–Ω–∏–µ": failed_big},
        {"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å":"–ü—Ä–∏–≤—ã—á–µ–∫ –≤—Å–µ–≥–æ", "–ó–Ω–∞—á–µ–Ω–∏–µ": total_habits},
        {"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å":"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–π –ø—Ä–∏–≤—ã—á–µ–∫", "–ó–Ω–∞—á–µ–Ω–∏–µ": total_h_done},
        {"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å":"–ü—Ä–æ–≤–∞–ª–æ–≤ –ø—Ä–∏–≤—ã—á–µ–∫", "–ó–Ω–∞—á–µ–Ω–∏–µ": total_h_fail},
        {"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å":"–ò—Ç–æ–≥–æ–≤—ã–π XP", "–ó–Ω–∞—á–µ–Ω–∏–µ": int(archive.get("xp",0))},
        {"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å":"–ò—Ç–æ–≥–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å", "–ó–Ω–∞—á–µ–Ω–∏–µ": int(archive.get("level",1))},
    ])

    # –ü–∏—à–µ–º –≤ xlsx (–≤ –ø–∞–º—è—Ç—å)
    buf = io.BytesIO()
    with pd.ExcelWriter(buf, engine="xlsxwriter") as writer:
        df_summary.to_excel(writer, sheet_name="–°–≤–æ–¥–∫–∞", index=False)
        df_xp.to_excel(writer, sheet_name="XP –ø–æ –¥–Ω—è–º", index=False)
        df_goals.to_excel(writer, sheet_name="–ó–∞–¥–∞—á–∏", index=False)
        df_big.to_excel(writer, sheet_name="–ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏", index=False)
        df_habits.to_excel(writer, sheet_name="–ü—Ä–∏–≤—ã—á–∫–∏", index=False)
    buf.seek(0)
    return buf.read()

def reset_all_stats_after_export():
    """–û–±–Ω—É–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Ä–∞–±–æ—á–∏–µ —Å–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á—ë—Ç–∞."""
    st.session_state.goals = []
    st.session_state.big_goals = []
    st.session_state.habits = []
    st.session_state.xp_log = {}
    st.session_state.discipline_awarded_dates = []
    st.session_state.xp = 0
    st.session_state.level = 1
    st.session_state.stats = _default_stats_dict()
    save_state()

def auto_check_yearly_reset():
    """
    –ö–∞–∂–¥—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç: –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è 31 –¥–µ–∫–∞–±—Ä—è >= 12:00 (–ú–°–ö) –∏ –∑–∞ —ç—Ç–æ—Ç –≥–æ–¥
    –µ—â—ë –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–ª–∏ ‚Äî —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç, –ø–æ–¥–Ω—è—Ç—å —Ñ–ª–∞–≥ –º–æ–¥–∞–ª–∫–∏ –∏ –æ–±–Ω—É–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
    """
    now_msk = _moscow_now()
    year = now_msk.year
    # 31 –¥–µ–∫–∞–±—Ä—è, 12:00 –∏–ª–∏ –ø–æ–∑–∂–µ
    if (now_msk.month, now_msk.day) != (12, 31) or now_msk.hour < 12:
        return
    # —É–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–ª–∏ —ç—Ç–æ—Ç –≥–æ–¥?
    if st.session_state.get("last_reset_year") == year:
        return

    # --- —Ñ–æ—Ä–º–∏—Ä—É–µ–º snapshot –¥–ª—è –æ—Ç—á—ë—Ç–∞
    snapshot = serialize_state()  # –¢–ï–ö–£–©–ï–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ–±–Ω—É–ª–µ–Ω–∏—è
    report_bytes = export_year_report_xlsx(snapshot, year)
    # —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ session_state –¥–ª—è download_button
    st.session_state.yearly_report_bytes = report_bytes
    st.session_state.yearly_report_year = year

    # --- –æ–±–Ω—É–ª—è–µ–º –≤—Å—ë
    reset_all_stats_after_export()

    # –∑–∞–ø–æ–º–Ω–∏–º, —á—Ç–æ –≤ —ç—Ç–æ–º –≥–æ–¥—É —É–∂–µ —Å–±—Ä–æ—à–µ–Ω–æ
    st.session_state.last_reset_year = year
    st.session_state.year_reset_pending = True
    save_state()

def render_year_reset_modal():
    """–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–æ—à–µ–¥—à–∏–º –≥–æ–¥–æ–º + –∫–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç –∏ –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É."""
    if not st.session_state.get("year_reset_pending"):
        return

    title = "üéÜ –° –ù–æ–≤—ã–º –≥–æ–¥–æ–º!"
    body_md = (
        "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø—Ä–æ—à–µ–¥—à–∏–º –≥–æ–¥–æ–º! –¢—ã –ø—Ä–æ–¥–µ–ª–∞–ª(–∞) –æ–≥—Ä–æ–º–Ω—É—é —Ä–∞–±–æ—Ç—É ‚Äî –≥–æ—Ä–¥–∏—Å—å —Å–æ–±–æ–π. "
        "–ü—É—Å—Ç—å –Ω–æ–≤—ã–π –≥–æ–¥ –±—É–¥–µ—Ç –µ—â—ë —Å–∏–ª—å–Ω–µ–µ, —Ä–∞–¥–æ—Å—Ç–Ω–µ–µ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–µ–µ. üöÄ\n\n"
        "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å **–ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ –≥–æ–¥** –≤ Excel."
    )

    # 1) –ï—Å–ª–∏ –µ—Å—Ç—å st.dialog (–Ω–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏)
    if hasattr(st, "dialog"):
        @st.dialog(title)
        def _year_dialog():
            st.markdown(body_md)
            year = st.session_state.get("yearly_report_year", _moscow_now().year)
            data = st.session_state.get("yearly_report_bytes", b"")
            file_name = f"year_report_{year}.xlsx"
            if data:
                st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç", data=data, file_name=file_name, mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", use_container_width=True)
            if st.button("–¢–æ–ª—å–∫–æ –≤–ø–µ—Ä—ë–¥ üí™", use_container_width=True, key="close_newyear"):
                st.session_state.year_reset_pending = False
                # —á–∏—Å—Ç–∏–º –±–∞–π—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –≤–∏—Å–µ–ª–∏ –≤ –ø–∞–º—è—Ç–∏
                st.session_state.yearly_report_bytes = b""
                save_state()
                st.rerun()
        _year_dialog()
        return

    # 2) Fallback: ¬´–ø—Å–µ–≤–¥–æ-–º–æ–¥–∞–ª–∫–∞¬ª
    st.markdown("""
    <style>
      .ny-overlay { position: fixed; inset: 0; background: rgba(0,0,0,.55);
        display:flex; align-items:center; justify-content:center; z-index: 9999; }
      .ny-modal { width:min(560px,95vw); background:#111; color:#fff; border:1px solid #333;
        border-radius: 16px; padding: 24px; box-shadow: 0 20px 60px rgba(0,0,0,.6); }
      .ny-title { font-size:24px; margin:0 0 8px 0; }
      .ny-sub { opacity:.9; margin-bottom: 14px; white-space: pre-wrap; }
    </style>
    """, unsafe_allow_html=True)
    st.markdown(f"""
    <div class="ny-overlay">
      <div class="ny-modal">
        <div class="ny-title">{title}</div>
        <div class="ny-sub">{body_md}</div>
      </div>
    </div>
    """, unsafe_allow_html=True)

    # –ö–Ω–æ–ø–∫–∏ —Ä—è–¥–æ–º (–≤ –æ–±—ã—á–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
    year = st.session_state.get("yearly_report_year", _moscow_now().year)
    data = st.session_state.get("yearly_report_bytes", b"")
    file_name = f"year_report_{year}.xlsx"
    if data:
        st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç", data=data, file_name=file_name, mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", use_container_width=True, key="dl_year_report_fb")
    if st.button("–¢–æ–ª—å–∫–æ –≤–ø–µ—Ä—ë–¥ üí™", use_container_width=True, key="close_newyear_fb"):
        st.session_state.year_reset_pending = False
        st.session_state.yearly_report_bytes = b""
        save_state()
        st.rerun()

# ========================= –°–û–•–†–ê–ù–ï–ù–ò–ï/–ó–ê–ì–†–£–ó–ö–ê =========================
def serialize_state():
    return {
        "xp": st.session_state.xp,
        "level": st.session_state.level,
        "stats": st.session_state.stats,
        "goals": [
    {
        "title": g["title"],
        "due": g["due"].isoformat(),
        "type": g["type"],
        "category": g.get("category", "–ü—Ä–æ—á–µ–µ"),
        "done": g["done"],
        "failed": g["failed"],
        "overdue": g.get("overdue", False),
        "stat": g["stat"],
        "recur_mode": g.get("recur_mode", "none"),
        "recur_days": g.get("recur_days", []),
        "time": g.get("time"),  # <‚Äî –ù–û–í–û–ï
    }
    for g in st.session_state.goals
    ],
        "xp_log": st.session_state.xp_log,
        "discipline_awarded_dates": st.session_state.discipline_awarded_dates,

        # –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏
        "big_goals": [
            {
                "title": g["title"],
                "due": g["due"].isoformat(),
                "done": g["done"],
                "failed": g["failed"],
                "note": g.get("note", ""),
            }
            for g in st.session_state.get("big_goals", [])
        ],

        # –ø—Ä–∏–≤—ã—á–∫–∏
        "habits": [
            {
                "title": h["title"],
                "days": h.get("days", []),
                "stat": h.get("stat", "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ üéØ"),
                "completions": h.get("completions", []),
                "failures": h.get("failures", []),
            }
            for h in st.session_state.get("habits", [])
        ],
    }


def deserialize_state(data: dict):
    st.session_state.xp = int(data.get("xp", 0))
    st.session_state.level = int(data.get("level", 1))
    st.session_state.stats = data.get(
        "stats",
        {
            "–ó–¥–æ—Ä–æ–≤—å–µ ‚ù§Ô∏è": 0,
            "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç üß†": 0,
            "–†–∞–¥–æ—Å—Ç—å üôÇ": 0,
            "–û—Ç–Ω–æ—à–µ–Ω–∏—è ü§ù": 0,
            "–£—Å–ø–µ—Ö ‚≠ê": 0,
            "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ üéØ": 0.0,
        },
    )

    # –æ–±—ã—á–Ω—ã–µ –∑–∞–¥–∞—á–∏
    st.session_state.goals.append(
    {
        "title": g["title"],
        "due": date.fromisoformat(g["due"]),
        "type": g["type"],
        "category": g.get("category", "–ü—Ä–æ—á–µ–µ"),
        "done": g.get("done", False),
        "failed": g.get("failed", False),
        "overdue": g.get("overdue", False),
        "stat": g.get("stat", "–£—Å–ø–µ—Ö ‚≠ê"),
        "recur_mode": g.get("recur_mode", "none"),
        "recur_days": g.get("recur_days", []),
        "time": g.get("time"),  # <‚Äî –ù–û–í–û–ï
    }
    )


    # xp_log (–í–´–†–û–í–ù–Ø–ù –ø–æ —É—Ä–æ–≤–Ω—é —Ñ—É–Ω–∫—Ü–∏–∏)
    xp_src = data.get("xp_log", {})
    if isinstance(xp_src, dict):
        st.session_state.xp_log = {str(k): int(v) for k, v in xp_src.items()}
    else:
        try:
            st.session_state.xp_log = {str(k): int(v) for k, v in xp_src}
        except Exception:
            st.session_state.xp_log = {}

    # –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞
    st.session_state.discipline_awarded_dates = data.get("discipline_awarded_dates", [])

    # –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏
    st.session_state.big_goals = []
    for g in data.get("big_goals", []):
        st.session_state.big_goals.append({
            "title": g["title"],
            "due": date.fromisoformat(g["due"]),
            "done": g.get("done", False),
            "failed": g.get("failed", False),
            "note": g.get("note", ""),
        })

        # –ø—Ä–∏–≤—ã—á–∫–∏
    st.session_state.habits = []
    for h in data.get("habits", []):
        st.session_state.habits.append({
            "title": h["title"],
            "days": h.get("days", []),
            "stat": h.get("stat", "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ üéØ"),
            "completions": list(h.get("completions", [])),
            "failures": list(h.get("failures", [])),
        })

# ========================= XP / –°–¢–ê–¢–´ =========================
def ensure_xp_log_dict():
    log = st.session_state.get("xp_log")
    if log is None:
        st.session_state.xp_log = {}
        return
    if isinstance(log, list):
        # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –≤ —Å–ª–æ–≤–∞—Ä—å
        try:
            st.session_state.xp_log = {str(k): int(v) for k, v in log}
        except Exception:
            st.session_state.xp_log = {}
    elif not isinstance(log, dict):
        st.session_state.xp_log = {}


def add_xp(delta: int):
    """–ù–∞—á–∏—Å–ª—è–µ—Ç/—Å–ø–∏—Å—ã–≤–∞–µ—Ç –æ–ø—ã—Ç, –ª–æ–≥–∏—Ä—É–µ—Ç –µ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è."""
    ensure_xp_log_dict()

    xp_old = int(st.session_state.get("xp", 0))
    lvl_old = int(st.session_state.get("level", 1))

    xp_new = xp_old + int(delta)
    st.session_state.xp = xp_new

    # –ª–æ–≥ –ø–æ –¥–Ω—è–º
    d = date.today().isoformat()
    st.session_state.xp_log[d] = int(st.session_state.xp_log.get(d, 0)) + int(delta)

    # –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–∞–∂–¥—ã–µ 1000 XP (–±–∞–∑–æ–≤—ã–π 1)
    lvl_new = max(1, (xp_new // 1000) + 1)
    if lvl_new > lvl_old:
        st.session_state.level = lvl_new
        st.session_state.levelup_pending = True
        st.session_state.levelup_to = lvl_new

    save_state()

WEEKDAY_LABELS = ["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"]  # –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å ‚Äî –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ –Ω–µ –≤—Å—Ç–∞–≤–ª—è–π—Ç–µ

def today_str() -> str:
    return date.today().isoformat()

def is_habit_scheduled_today(h: dict, on_date: date | None = None) -> bool:
    d = on_date or date.today()
    return d.weekday() in h.get("days", [])

def habit_done_on_date(h: dict, on_date: date | None = None) -> bool:
    d = on_date or date.today()
    return (d.isoformat() in h.get("completions", []))

def habit_failed_on_date(h: dict, on_date: date | None = None) -> bool:
    d = on_date or date.today()
    return (d.isoformat() in h.get("failures", []))

def habit_mark_done(h: dict, on_date: date | None = None):
    d = (on_date or date.today()).isoformat()
    if d not in h["completions"]:
        h["completions"].append(d)
        add_xp(HABIT_XP)
        # –ø—Ä–æ–∫–∞—á–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –Ω–∞ +1 (–∫–∞–∫ –∏ —É –∑–∞–¥–∞—á)
        update_stat(h.get("stat", "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ üéØ"), +1)
        # –º–∞–ª–µ–Ω—å–∫–∏–π –±–æ–Ω—É—Å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∑–∞ —Ñ–∞–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ª—é–±–æ–π –µ–¥–∏–Ω–∏—Ü—ã –≤ –¥–µ–Ω—å —É –Ω–∞—Å –Ω–µ –¥–∞—ë—Ç—Å—è,
        # –æ–±—â–∏–π +1 –∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –∞–≤—Ç–æ-–ø—Ä–∞–≤–∏–ª–æ–º, –∫–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤—Å—ë –∑–∞ –¥–µ–Ω—å
        save_state()

def habit_mark_failed(h: dict, on_date: date | None = None):
    d = (on_date or date.today()).isoformat()
    if d not in h["failures"]:
        h["failures"].append(d)
        add_xp(-HABIT_XP)
        update_stat(h.get("stat", "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ üéØ"), -1)
        save_state()

def habit_uid(h: dict) -> str:
    return f"{h['title']}|{','.join(map(str, h.get('days', [])))}|{h.get('stat','')}"


def update_stat(stat_name: str, delta: float):
    st.session_state.stats[stat_name] = max(
        0, round(st.session_state.stats.get(stat_name, 0) + float(delta), 2)
    )
    save_state()


# ========================= –ê–í–¢–û-–õ–û–ì–ò–ö–ê (–ø—Ä–æ—Å—Ä–æ—á–∫–∏/–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞) =========================
def _ensure_discipline_list():
    if "discipline_awarded_dates" not in st.session_state or st.session_state.discipline_awarded_dates is None:
        st.session_state.discipline_awarded_dates = []


def _day_done_ok(the_day: date) -> bool:
    """True, –µ—Å–ª–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏ –ò –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –¥–µ–Ω—å, –≤—ã–ø–æ–ª–Ω–µ–Ω—ã; –∏ –Ω–µ—Ç –ø—Ä–æ–≤–∞–ª–æ–≤."""
    # –ó–∞–¥–∞—á–∏ (–∫–∞–∫ –±—ã–ª–æ)
    todays_goals = [g for g in st.session_state.goals if g["due"] == the_day]
    if todays_goals:
        if any(g["failed"] for g in todays_goals):
            return False
        if not all(g["done"] for g in todays_goals if g.get("recur_mode","none") == "none"):
            # –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ done
            if any((not g["done"]) and g.get("recur_mode","none") == "none" for g in todays_goals):
                return False

    # –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏ –Ω–∞ –¥–µ–Ω—å —Ç–æ–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç—ã –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å,
    # –Ω–æ —É –Ω–∞—Å –∏—Ö –º—ã –ø–µ—Ä–µ–Ω–æ—Å–∏–º –ø–æ –Ω–∞–∂–∞—Ç–∏—é. –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∏ –æ–Ω–∏ –Ω–µ –∑–∞–∫—Ä—ã—Ç—ã, —Å—á–∏—Ç–∞–µ–º –Ω–µ –æ–∫.
    if any((g.get("recur_mode","none")!="none") and (g["due"]==the_day) for g in todays_goals):
        # –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –æ–¥–Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è –∑–∞–¥–∞—á–∞ —Å due==the_day, —Ç—Ä–µ–±—É–µ–º, —á—Ç–æ–±—ã —é–∑–µ—Ä –µ—ë –Ω–∞–∂–∞–ª "–≤—ã–ø–æ–ª–Ω–∏—Ç—å" (—Ç.–µ. –Ω–µ –æ—Å—Ç–∞–≤–∏–ª –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å)
        if any((g.get("recur_mode","none")!="none") and (g["due"]==the_day) for g in todays_goals):
            return False

    # –ü—Ä–∏–≤—ã—á–∫–∏
    todays_habits = [h for h in st.session_state.get("habits", []) if is_habit_scheduled_today(h, the_day)]
    if todays_habits:
        # –µ—Å–ª–∏ –∫–∞–∫–∞—è-—Ç–æ –ø—Ä–∏–≤—ã—á–∫–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å ‚Äî —Å—Ä–∞–∑—É –Ω–µ –æ–∫
        if any(habit_failed_on_date(h, the_day) for h in todays_habits):
            return False
        # –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –Ω–∞ –¥–µ–Ω—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        if not all(habit_done_on_date(h, the_day) for h in todays_habits):
            return False

    # –µ—Å–ª–∏ –Ω–∏ –∑–∞–¥–∞—á, –Ω–∏ –ø—Ä–∏–≤—ã—á–µ–∫ ‚Äî –Ω–µ –¥–∞—ë–º –∞–≤—Ç–æ-–±–æ–Ω—É—Å (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º False)
    if not todays_goals and not todays_habits:
        return False

    return True

def auto_process_overdues():
    """–®—Ç—Ä–∞—Ñ—É–µ–º –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏; –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ ‚Äî –ø–æ–º–µ—á–∞–µ–º –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–º–∏."""
    changed = False
    today = date.today()

    for g in st.session_state.goals:
        if g["done"] or g["failed"]:
            continue
        now_dt = datetime.now()
            due_dt = goal_due_datetime(g)
            if due_dt.date() < today or (due_dt.date() == today and due_dt < now_dt):
    # —Ç.–µ. –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ, –µ—Å–ª–∏ –¥–µ–Ω—å –≤ –ø—Ä–æ—à–ª–æ–º, –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è, –Ω–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ

                # –ø–æ–≤—Ç–æ—Ä—è–µ–º—ã–µ ‚Äî –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–æ–ø—É—Å–∫
                while g["due"] < today:
                    add_xp(-reward)
                    update_stat(g["stat"], -1)
                    update_stat("–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ üéØ", -0.1)
                    g["due"] = compute_next_due(g)
                    g["type"] = classify_by_due(g["due"])
                    changed = True
                g["overdue"] = False
            else:
                # –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ
                g["overdue"] = True
                add_xp(-reward)
                update_stat(g["stat"], -1)
                update_stat("–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ üéØ", -0.1)
                g["failed"] = True
                changed = True

    if changed:
        save_state()

def auto_process_big_goal_overdues():
    """–ï—Å–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ü–µ–ª—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –∏ –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞ ‚Äî –ø—Ä–æ–≤–∞–ª–∏—Ç—å –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —à—Ç—Ä–∞—Ñ –æ–¥–∏–Ω —Ä–∞–∑."""
    today = date.today()
    changed = False

    for g in st.session_state.get("big_goals", []):
        if g.get("done") or g.get("failed"):
            continue
        if g["due"] < today:
            # –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—É—é –∏ —à—Ç—Ä–∞—Ñ—É–µ–º
            g["failed"] = True
            award_big_goal_failure()
            changed = True

    if changed:
        save_state()

def auto_award_yesterday_if_ok():
    """–ï—Å–ª–∏ –≤—á–µ—Ä–∞ –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏ –±–æ–Ω—É—Å –µ—â—ë –Ω–µ –≤—ã–¥–∞–≤–∞–ª—Å—è ‚Äî +1 –∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ."""
    _ensure_discipline_list()
    y = date.today() - timedelta(days=1)
    y_str = y.isoformat()
    if y_str in st.session_state.discipline_awarded_dates:
        return
    if _day_done_ok(y):
        update_stat("–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ üéØ", +1.0)
        st.session_state.discipline_awarded_dates.append(y_str)
        save_state()
        st.sidebar.success("–í—á–µ—Ä–∞ –≤—Å—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ +1.0 üéØ")

# ========================= UI: –ó–ê–î–ê–ß–ò =========================
def goal_uid(g) -> str:
    base = (
        f"{g['title']}|{g['due'].isoformat()}|{g.get('recur_mode','none')}|"
        f"{','.join(map(str, g.get('recur_days', [])))}|{g.get('category','')}"
    )
    return f"{base}|{id(g)}"

def big_goal_uid(g) -> str:
    return f"{g['title']}|{g['due'].isoformat()}|{id(g)}"

def row(goal, scope: str, idx: int):
    reward = GOAL_TYPES[goal["type"]]
    status = "‚úÖ" if goal["done"] else ("‚ùå" if goal["failed"] else ("‚è∞" if goal.get("overdue") else "‚¨ú"))

    left, mid, b1, b2, b3 = st.columns([6, 3, 1, 1, 1])

    with left:
        if goal["due"] == date.today() and not goal["done"] and not goal["failed"]:
            st.markdown(
                '<div style="display:inline-block;padding:2px 8px;border-radius:12px;'
                'background:#ffdd57;color:#000;font-size:12px;margin-right:6px;">–°–µ–≥–æ–¥–Ω—è</div>',
                unsafe_allow_html=True,
            )
        st.write(
            f"{status} **{goal['title']}** ¬∑ {goal['type']} (¬±{reward} XP) ¬∑ {goal['stat']} ¬∑ "
            f"üè∑Ô∏è {goal.get('category','')}"
        )

    time_str = goal.get("time")
    time_part = f" ‚Ä¢ ‚è∞ {time_str}" if time_str else ""
    mid.caption(f"üìÖ {goal['due'].strftime('%d-%m-%Y')}{time_part} ‚Ä¢ {days_left_text(goal['due'], time_str)}")


    uid = goal_uid(goal)

    if not goal["done"] and not goal["failed"]:
        if b1.button("‚úÖ", key=f"{scope}_done_{uid}_{idx}", use_container_width=True, help="–í—ã–ø–æ–ª–Ω–∏—Ç—å"):
            if goal.get("recur_mode", "none") != "none":
                award_xp_for_goal(goal, True)
                goal["due"] = compute_next_due(goal)
                goal["type"] = classify_by_due(goal["due"])
            else:
                goal["done"] = True
                award_xp_for_goal(goal, True)
            save_state()
            st.rerun()

        if b2.button("‚ùå", key=f"{scope}_fail_{uid}_{idx}", use_container_width=True, help="–ü—Ä–æ–≤–∞–ª–∏—Ç—å"):
            if goal.get("recur_mode", "none") != "none":
                award_xp_for_goal(goal, False)
                goal["due"] = compute_next_due(goal)
                goal["type"] = classify_by_due(goal["due"])
            else:
                goal["failed"] = True
                award_xp_for_goal(goal, False)
            save_state()
            st.rerun()

    if b3.button("üóëÔ∏è", key=f"{scope}_del_{uid}_{idx}", use_container_width=True, help="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"):
        st.session_state.goals = [g for g in st.session_state.goals if g is not goal]
        save_state()
        st.rerun()

def render_list(goals, scope: str):
    if not goals:
        st.caption("–ù–µ—Ç –∑–∞–¥–∞—á –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ.")
        return
    goals = sorted(goals, key=lambda g: goal_due_datetime(g))
    for i, g in enumerate(goals):
        row(g, scope, i)


# ========================= –§–û–†–ú–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø =========================
def render_add_task_form(suffix: str = ""):
    """–§–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (–∫–ª—é—á–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã –∑–∞ —Å—á—ë—Ç suffix)"""

    with st.form(f"add_goal_form{suffix}", clear_on_submit=True):
        st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")

        # –ü–æ–ª—è —Ñ–æ—Ä–º—ã
        title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏", key=f"title{suffix}")
        due_input = st.date_input("–î–µ–¥–ª–∞–π–Ω", value=date.today(), key=f"due{suffix}")
        characteristic = st.selectbox(
            "–ö–∞–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –∫–∞—á–∞–µ—Ç—Å—è:",
            ["–ó–¥–æ—Ä–æ–≤—å–µ ‚ù§Ô∏è", "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç üß†", "–†–∞–¥–æ—Å—Ç—å üôÇ", "–û—Ç–Ω–æ—à–µ–Ω–∏—è ü§ù", "–£—Å–ø–µ—Ö ‚≠ê", "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ üéØ"],
            key=f"char{suffix}"
        )
        category = st.selectbox(
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è:",
            ["–†–∞–±–æ—Ç–∞", "–£—á—ë–±–∞", "–î–æ–º", "–ó–¥–æ—Ä–æ–≤—å–µ", "–•–æ–±–±–∏", "–î—Ä—É–≥–æ–µ"],
            key=f"cat{suffix}"
        )

        # –†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        RECUR_OPTIONS = {
            "–ù–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å": "none",
            "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ": "daily",
            "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ": "weekly",
            "–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏": "by_days"
        }
        recur_mode_label = st.selectbox(
            "–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ:",
            list(RECUR_OPTIONS.keys()),
            index=0,
            key=f"recur_mode{suffix}"
        )
        mode_key = RECUR_OPTIONS[recur_mode_label]

        recur_days = []
        if mode_key == "by_days":
            st.markdown("**–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏:**")
            checks = []
            cols = st.columns(7)
            for i, day in enumerate(["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]):
                with cols[i]:
                    checked = st.checkbox(day, key=f"day_{i}{suffix}")
                    if checked:
                        checks.append(i)
            recur_days = checks
        
        use_time = st.checkbox("–£–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è", key=f"use_time{suffix}")
        tvalue = None
        if use_time:
            t = st.time_input("–í—Ä–µ–º—è –¥–µ–¥–ª–∞–π–Ω–∞", key=f"time{suffix}")
            # st.time_input –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç datetime.time ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏–º —Å—Ç—Ä–æ–∫–æ–π HH:MM
            tvalue = f"{t.hour:02d}:{t.minute:02d}"

        submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", use_container_width=True, key=f"submit{suffix}")

        if submitted:
            if not title.strip():
                st.error("‚ùå –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
            else:
                new_goal = {
                    "title": title.strip(),
                    "due": due_input if isinstance(due_input, date) else date.fromisoformat(str(due_input)),
                    "type": classify_by_due(due_input),
                    "category": category,
                    "done": False,
                    "failed": False,
                    "overdue": False,
                    "stat": characteristic,
                    "recur_mode": mode_key,
                    "recur_days": recur_days,
                    "time": tvalue,  # <‚Äî –ù–û–í–û–ï (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
}


                st.session_state.goals.append(new_goal)
                save_state()
                st.success(f"‚úÖ –ó–∞–¥–∞—á–∞ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                st.rerun()

# ========================= –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø =========================
def pie_from_counter(counter_like, title="–î–∏–∞–≥—Ä–∞–º–º–∞"):
    """–ü–æ–Ω—á–∏–∫–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —á–µ—Ä–µ–∑ Altair —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    alt.data_transformers.disable_max_rows()
    try:
        items = list(counter_like.items())
    except AttributeError:
        items = list(counter_like)

    df = pd.DataFrame(items, columns=["label", "value"])
    if df.empty or (df["value"].fillna(0).astype(float).sum() == 0):
        st.caption(f"‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è: {title}.")
        return

    df = df[df["value"].fillna(0).astype(float) > 0]
    chart = (
        alt.Chart(df)
        .mark_arc(innerRadius=60)
        .encode(
            theta=alt.Theta("value:Q", stack=True),
            color=alt.Color("label:N", legend=alt.Legend(title=None)),
            tooltip=[alt.Tooltip("label:N", title="–ö–∞—Ç–µ–≥–æ—Ä–∏—è"), alt.Tooltip("value:Q", title="–ó–Ω–∞—á–µ–Ω–∏–µ")],
        )
        .properties(title=title)
    )
    st.altair_chart(chart, use_container_width=True)


def _xp_last_7_days_df():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame (date, XP) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç dict {'DD-MM-YYYY': delta} –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø–∞—Ä [(date, delta), ...].
    """
    xp_src = st.session_state.get("xp_log")
    if xp_src is None:
        return None

    if isinstance(xp_src, dict):
        df = pd.DataFrame({"date": list(xp_src.keys()), "XP": list(xp_src.values())})
    else:
        try:
            df = pd.DataFrame(xp_src, columns=["date", "XP"])
        except Exception:
            return None

    df["date"] = pd.to_datetime(df["date"]).dt.date
    df = df.groupby("date", as_index=False)["XP"].sum()

    idx = pd.date_range(end=pd.Timestamp.today().normalize(), periods=7, freq="D").date
    s = pd.Series(0.0, index=idx)
    s.update(pd.Series(df["XP"].values, index=df["date"]))
    return pd.DataFrame({"date": pd.to_datetime(s.index), "XP": s.values})


def render_progress_section():
    """–°–µ–∫—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: 2 –ø–æ–Ω—á–∏–∫–∞ + –ª–∏–Ω–∏—è XP."""
    st.markdown("## üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")

    goals = st.session_state.get("goals", [])
    done_tasks = [g for g in goals if g.get("done")]

    col1, col2 = st.columns(2)
    with col1:
        by_type = Counter(g.get("type", "–ù–µ–∏–∑–≤.") for g in done_tasks)
        pie_from_counter(by_type, "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    with col2:
        by_cat = Counter(g.get("category", "–ü—Ä–æ—á–µ–µ") for g in done_tasks)
        pie_from_counter(by_cat, "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")

    st.divider()
    xp_df = _xp_last_7_days_df()
    if xp_df is not None and not xp_df.empty:
        st.markdown("#### XP –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π")
        st.line_chart(xp_df, x="date", y="XP", use_container_width=True)
    else:
        st.caption("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ XP –∑–∞ 7 –¥–Ω–µ–π.")


# ========================= –°–¢–†–ê–ù–ò–¶–´ =========================
def award_xp_for_goal(goal: dict, success: bool):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—É/—à—Ç—Ä–∞—Ñ –¥–ª—è goal –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –µ—ë:
      - add_xp(+reward) –∏–ª–∏ add_xp(-reward)
      - –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É
    """
    reward = GOAL_TYPES.get(goal.get("type", "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è"), 5)
    stat_name = goal.get("stat", "–£—Å–ø–µ—Ö ‚≠ê")

    if success:
        add_xp(reward)
        update_stat(stat_name, +1)
        update_stat("–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ üéØ", +0.1)
    else:
        add_xp(-reward)
        update_stat(stat_name, -1)
        update_stat("–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ üéØ", -0.1)

def award_big_goal_completion():
    """+250 XP –∏ +10 –∫–æ –≤—Å–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ü–µ–ª–∏."""
    add_xp(BIG_GOAL_XP)
    for k in list(st.session_state.stats.keys()):
        update_stat(k, +BIG_GOAL_STAT_BONUS)

def render_home_page():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""

    render_levelup_modal()
    st.header("üè† –ì–ª–∞–≤–Ω–∞—è")
    render_year_reset_modal()

        # --- –°—á—ë—Ç—á–∏–∫–∏ ---
    goals = st.session_state.get("goals", [])
    today = date.today()

    today_count = sum(1 for g in goals if g["due"] == today and not g["done"] and not g["failed"])
    active_total = sum(1 for g in goals if not g["done"] and not g["failed"])

    # —Å—Ç–∏–ª—å ¬´–ø–∏–ª—é–ª–µ–∫¬ª
    st.markdown("""
    <style>
    .counters { display:flex; gap:10px; flex-wrap:wrap; margin-bottom: 8px; }
    .pill {
      display:inline-block; padding:6px 12px; border-radius:999px;
      background: rgba(255,255,255,0.07); border:1px solid rgba(255,255,255,0.12);
      font-size:14px; color:#eaeaea;
    }
    .pill-today { background:#ffdd57; color:#111; border-color:#e6c84f; }
    </style>
    """, unsafe_allow_html=True)

    st.markdown(
        f"<div class='counters'>"
        f"<span class='pill pill-today'>–°–µ–≥–æ–¥–Ω—è: <b>{today_count}</b></span>"
        f"<span class='pill'>–ê–∫—Ç–∏–≤–Ω—ã—Ö –≤—Å–µ–≥–æ: <b>{active_total}</b></span>"
        f"</div>",
        unsafe_allow_html=True
    )

    # --- –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –æ–ø—ã—Ç ---
    st.subheader("üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
    cols = st.columns(6)
    stats = st.session_state.stats
    keys = ["–ó–¥–æ—Ä–æ–≤—å–µ ‚ù§Ô∏è", "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç üß†", "–†–∞–¥–æ—Å—Ç—å üôÇ", "–û—Ç–Ω–æ—à–µ–Ω–∏—è ü§ù", "–£—Å–ø–µ—Ö ‚≠ê", "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ üéØ"]
    for i, k in enumerate(keys):
        with cols[i]:
            st.metric(k, f"{stats.get(k, 0):.1f}")

    xp = st.session_state.xp
    level = st.session_state.level
    st.markdown(f"**–û–ø—ã—Ç (XP):** {xp} / 1000 &nbsp;&nbsp;|&nbsp;&nbsp; **–£—Ä–æ–≤–µ–Ω—å:** {level}")
    st.progress(min(1.0, (xp % 1000) / 1000))

    st.divider()

    # --- –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–∫–∞—Ä—Ç–æ—á–∫–∏) ---
    render_today_tasks_section()
    st.divider()

    # --- –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É (—Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–∞—è—Å—è —Ñ–æ—Ä–º–∞) ---
    st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")

    if "show_add_form" not in st.session_state:
        st.session_state.show_add_form = False

    if not st.session_state.show_add_form:
        if st.button("‚ûï –û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É", key="open_add_form_home"):
            st.session_state.show_add_form = True
            st.rerun()
    else:
        render_add_task_form(suffix="_home")
        if st.button("üîΩ –°–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É", key="hide_add_form_home"):
            st.session_state.show_add_form = False
            st.rerun()

    st.divider()

    # --- –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–ø–æ —Ç–∏–ø–∞–º) ---
    st.subheader("üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏")

    active = [g for g in st.session_state.goals if not g["done"] and not g["failed"]]
    # —Ç–µ–ø–µ—Ä—å –ù–ï –∏—Å–∫–ª—é—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ ‚Äî –æ–Ω–∏ —Ç–æ–∂–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ ¬´–ê–∫—Ç–∏–≤–Ω—ã–µ¬ª
    active_rest = active

    short = [g for g in active_rest if g["type"] == "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è"]
    mid   = [g for g in active_rest if g["type"] == "–°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–∞—è"]
    long  = [g for g in active_rest if g["type"] == "–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è"]

    st.markdown(f"#### ‚è±Ô∏è –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ ({len(short)})")
    render_list(short, "active_short")

    st.markdown(f"#### üìÜ –°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–µ ({len(mid)})")
    render_list(mid, "active_mid")

    st.markdown(f"#### üóìÔ∏è –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ ({len(long)})")
    render_list(long, "active_long")

def render_levelup_modal():
    """–ö—Ä–æ—Å—Å-–≤–µ—Ä—Å–∏—è –º–æ–¥–∞–ª–∫–∏ ¬´–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å¬ª: st.dialog –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ ‚Äî –ø—Å–µ–≤–¥–æ-–º–æ–¥–∞–ª–∫–∞."""
    if not st.session_state.get("levelup_pending"):
        return

    # –í–∞—Ä–∏–∞–Ω—Ç 1: –µ—Å–ª–∏ Streamlit –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç st.dialog
    if hasattr(st, "dialog"):
        @st.dialog("üéâ –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!")
        def _levelup_dialog():
            to_lvl = st.session_state.get("levelup_to", st.session_state.get("level", 1))
            st.markdown(f"## –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –î–æ—Å—Ç–∏–≥–Ω—É—Ç —É—Ä–æ–≤–µ–Ω—å **{to_lvl}** üöÄ")
            st.write("–¢—ã —Å—Ç–∞–ª(–∞) —Å–∏–ª—å–Ω–µ–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—É—Ç—å!")
            if st.button("–¢–æ–ª—å–∫–æ –≤–ø–µ—Ä—ë–¥ üí™", use_container_width=True, key="close_levelup_dialog"):
                st.session_state.levelup_pending = False
                save_state()
                st.rerun()
        _levelup_dialog()
        return

    # –í–∞—Ä–∏–∞–Ω—Ç 2: fallback ‚Äî ¬´–ø—Å–µ–≤–¥–æ-–º–æ–¥–∞–ª–∫–∞¬ª (–µ—Å–ª–∏ st.dialog –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
    st.markdown("""
    <style>
      .lvlup-overlay {
        position: fixed; inset: 0; background: rgba(0,0,0,0.55);
        display: flex; align-items: center; justify-content: center;
        z-index: 9999;
      }
      .lvlup-modal {
        width: min(520px, 92vw);
        background: #111; color: #fff; border: 1px solid #333;
        border-radius: 16px; padding: 24px;
        box-shadow: 0 20px 60px rgba(0,0,0,0.6);
      }
      .lvlup-title { font-size: 24px; margin: 0 0 8px 0; }
      .lvlup-sub { opacity: .85; margin-bottom: 18px; }
    </style>
    """, unsafe_allow_html=True)

    to_lvl = st.session_state.get("levelup_to", st.session_state.get("level", 1))
    st.markdown(
        f"""
        <div class="lvlup-overlay">
          <div class="lvlup-modal">
            <div class="lvlup-title">üéâ –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!</div>
            <div class="lvlup-sub">–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –î–æ—Å—Ç–∏–≥–Ω—É—Ç —É—Ä–æ–≤–µ–Ω—å <b>{to_lvl}</b> üöÄ<br/>–¢—ã —Å—Ç–∞–ª(–∞) —Å–∏–ª—å–Ω–µ–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—É—Ç—å!</div>
          </div>
        </div>
        """,
        unsafe_allow_html=True
    )

    # –ö–Ω–æ–ø–∫—É —Ä–µ–Ω–¥–µ—Ä–∏–º ¬´–ø–æ–≤–µ—Ä—Ö¬ª ‚Äî —Ä—è–¥–æ–º, –Ω–æ –ª–æ–≥–∏—á–µ—Å–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –º–æ–¥–∞–ª–∫–µ
    if st.button("–¢–æ–ª—å–∫–æ –≤–ø–µ—Ä—ë–¥ üí™", key="close_levelup_fallback", use_container_width=True):
        st.session_state.levelup_pending = False
        save_state()
        st.rerun()

def render_today_tasks_section():
    """–ö—Ä–∞—Å–∏–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ ‚úî / ‚úñ."""
    st.subheader("üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")

    today = date.today()
    today_tasks = [
        g for g in st.session_state.goals
        if g["due"] == today and not g["done"] and not g["failed"]
    ]

    st.markdown("""
    <style>
    .task-card {
        padding: 12px 14px; border: 1px solid rgba(255,255,255,0.08);
        border-radius: 12px; margin-bottom: 10px; background: rgba(255,255,255,0.03);
    }
    .task-row { display:flex; align-items:center; gap:10px; }
    .task-left { flex: 1; }
    .badge {
        display:inline-block; padding: 2px 8px; border-radius: 999px; font-size: 12px;
        background: #2a2a2a; color: #eaeaea; margin-right: 6px;
        border: 1px solid rgba(255,255,255,0.1);
    }
    .badge.today { background: #ffdd57; color:#000; border-color:#e6c84f; }
    .title { font-weight: 600; }
    .meta { color:#bbb; font-size:13px; margin-top:2px; }
    </style>
    """, unsafe_allow_html=True)

    if not today_tasks:
        st.info("–°–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç! üéâ")
        return

    for g in sorted(today_tasks, key=lambda x: x.get("category", "")):
        uid = goal_uid(g)
        reward = GOAL_TYPES.get(g["type"], 5)
        due_str = g["due"].strftime("%d-%m-%Y")
        time_str = g.get("time")
        time_part = f" ‚è∞ {time_str}" if time_str else ""
        status_tail = days_left_text(g["due"], time_str)
        ...
        f'    <div class="meta">{g.get("stat","")} ‚Ä¢ –¥–µ–¥–ª–∞–π–Ω: {due_str}{time_part} ‚Ä¢ {status_tail}</div>'


        with st.container():
            st.markdown('<div class="task-card">', unsafe_allow_html=True)

            c_left, c_done, c_fail = st.columns([8, 1, 1])

            with c_left:
                st.markdown(
                    f'<div class="task-row">'
                    f'  <div class="task-left">'
                    f'    <span class="badge today">–°–µ–≥–æ–¥–Ω—è</span>'
                    f'    <span class="badge">{g["type"]}</span>'
                    f'    <span class="badge">üè∑Ô∏è {g.get("category","")}</span>'
                    f'    <span class="badge">¬±{reward} XP</span>'
                    f'    <div class="title">{g["title"]}</div>'
                    f'    <div class="meta">{g.get("stat","")} ‚Ä¢ –¥–µ–¥–ª–∞–π–Ω: {due_str}</div>'
                    f'  </div>'
                    f'</div>',
                    unsafe_allow_html=True
                )

            with c_done:
                if st.button("‚úÖ", key=f"today_done_{uid}", use_container_width=True, help="–í—ã–ø–æ–ª–Ω–∏—Ç—å"):
                    if g.get("recur_mode", "none") != "none":
                        award_xp_for_goal(g, True)
                        g["due"] = compute_next_due(g)
                        g["type"] = classify_by_due(g["due"])
                    else:
                        g["done"] = True
                        award_xp_for_goal(g, True)
                    save_state()
                    st.rerun()

            with c_fail:
                if st.button("‚ùå", key=f"today_fail_{uid}", use_container_width=True, help="–ü—Ä–æ–≤–∞–ª–∏—Ç—å"):
                    if g.get("recur_mode", "none") != "none":
                        award_xp_for_goal(g, False)
                        g["due"] = compute_next_due(g)
                        g["type"] = classify_by_due(g["due"])
                    else:
                        g["failed"] = True
                        award_xp_for_goal(g, False)
                    save_state()
                    st.rerun()

            st.markdown('</div>', unsafe_allow_html=True)

# ====== –ü–û–õ–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ======

def _current_and_best_streak() -> tuple[int, int]:
    """
    –°—á–∏—Ç–∞–µ–º '—Å–µ—Ä–∏–∏ –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤' –Ω–∞ –æ—Å–Ω–æ–≤–µ discipline_awarded_dates:
    –¥–µ–Ω—å —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω—ã–º, –µ—Å–ª–∏ –≤—á–µ—Ä–∞ (–∏–ª–∏ –¥–∞—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞) –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω –≤–µ—Å—å –ø–ª–∞–Ω (–∑–∞–¥–∞—á–∏+–ø—Ä–∏–≤—ã—á–∫–∏).
    current ‚Äî —Ç–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è –¥–æ –≤—á–µ—Ä–∞ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.
    best ‚Äî –ª—É—á—à–∞—è —Å–µ—Ä–∏—è –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è.
    """
    dates = sorted(set(st.session_state.get("discipline_awarded_dates", [])))
    if not dates:
        return 0, 0

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç—ã date
    from datetime import datetime, timedelta
    ds = [datetime.fromisoformat(d).date() for d in dates]

    # –õ—É—á—à–∞—è —Å–µ—Ä–∏—è
    best = 0
    cur = 1
    for i in range(1, len(ds)):
        if (ds[i] - ds[i-1]).days == 1:
            cur += 1
        else:
            best = max(best, cur)
            cur = 1
    best = max(best, cur)

    # –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è –¥–æ –≤—á–µ—Ä–∞
    yesterday = date.today() - timedelta(days=1)
    # –Ω–∞–π–¥—ë–º —Ö–≤–æ—Å—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –æ–∫–∞–Ω—á–∏–≤–∞—é—â–µ–π—Å—è –Ω–∞ yesterday
    if ds[-1] != yesterday:
        current = 0
    else:
        current = 1
        i = len(ds) - 1
        while i > 0 and (ds[i] - ds[i-1]).days == 1:
            current += 1
            i -= 1

    return current, best


def _goals_stats():
    goals = st.session_state.get("goals", [])
    # –ø–æ —Ç–∏–ø–∞–º
    by_type = {"–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è": 0, "–°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–∞—è": 0, "–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è": 0}
    # –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    by_cat = {}
    done_cnt = 0
    fail_cnt = 0
    overdue_cnt = 0
    active_cnt = 0

    for g in goals:
        by_type[g["type"]] = by_type.get(g["type"], 0) + 1
        cat = g.get("category", "–ü—Ä–æ—á–µ–µ")
        by_cat[cat] = by_cat.get(cat, 0) + 1
        if g["done"]:
            done_cnt += 1
        elif g["failed"]:
            fail_cnt += 1
            if g.get("overdue"):
                overdue_cnt += 1
        else:
            active_cnt += 1

    return {
        "by_type": by_type,
        "by_cat": by_cat,
        "done": done_cnt,
        "failed": fail_cnt,
        "overdue": overdue_cnt,
        "active": active_cnt,
        "total": len(goals),
    }


def _big_goals_stats():
    bgs = st.session_state.get("big_goals", [])
    total = len(bgs)
    done = sum(1 for x in bgs if x.get("done"))
    failed = sum(1 for x in bgs if x.get("failed"))
    active = total - done - failed
    # –ø–æ –¥–µ–¥–ª–∞–π–Ω–∞–º –±–ª–∏–∂–∞–π—à–µ–µ/–ø—Ä–æ—à–µ–¥—à–µ–µ
    past_due = sum(1 for x in bgs if (not x.get("done") and not x.get("failed") and x["due"] < date.today()))
    return {
        "total": total, "done": done, "failed": failed, "active": active, "past_due": past_due
    }


def _habits_stats():
    habits = st.session_state.get("habits", [])
    total = len(habits)
    # —Å—É–º–º–∞—Ä–Ω—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è/–ø—Ä–æ–≤–∞–ª—ã
    total_done = sum(len(h.get("completions", [])) for h in habits)
    total_fail = sum(len(h.get("failures", [])) for h in habits)
    # —Å—Ä–µ–¥–Ω—è—è ¬´—É—Å–ø–µ—à–Ω–æ—Å—Ç—å¬ª –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º
    per_habit = []
    for h in habits:
        d = len(h.get("completions", []))
        f = len(h.get("failures", []))
        attempts = d + f
        rate = (d / attempts * 100) if attempts > 0 else 0.0
        per_habit.append((h["title"], d, f, rate))
    return {
        "total": total,
        "total_done": total_done,
        "total_fail": total_fail,
        "per_habit": per_habit,
    }


def _xp_last_7_days():
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (date_str, delta_xp) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    logs = st.session_state.get("xp_log", {})
    from datetime import timedelta
    out = []
    for i in range(6, -1, -1):
        d = (date.today() - timedelta(days=i))
        k = d.isoformat()  # –≤ –ª–æ–≥–∞—Ö –∫–ª—é—á–∏ ISO
        out.append((d.strftime("%d-%m-%Y"), int(logs.get(k, 0))))
    return out


def _week_distribution_from_dates(date_strs: list[str]) -> dict:
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ (0..6) –∏–∑ —Å–ø–∏—Å–∫–∞ 'YYYY-MM-DD'."""
    counts = {i: 0 for i in range(7)}
    for s in date_strs:
        try:
            d = date.fromisoformat(s)
            counts[d.weekday()] += 1
        except Exception:
            pass
    return counts

def _habits_week_success() -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {weekday_index: success_rate_percent}
    –≥–¥–µ success_rate = completions / (completions + failures) * 100.
    –°—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ –í–°–ï–ú –ø—Ä–∏–≤—ã—á–∫–∞–º —Å—É–º–º–∞—Ä–Ω–æ.
    """
    habits = st.session_state.get("habits", [])
    comp = {i: 0 for i in range(7)}
    fail = {i: 0 for i in range(7)}
    for h in habits:
        for s in h.get("completions", []):
            try:
                w = date.fromisoformat(s).weekday()
                comp[w] += 1
            except Exception:
                pass
        for s in h.get("failures", []):
            try:
                w = date.fromisoformat(s).weekday()
                fail[w] += 1
            except Exception:
                pass
    rate = {}
    for i in range(7):
        total = comp[i] + fail[i]
        rate[i] = round((comp[i] / total * 100.0), 1) if total > 0 else 0.0
    return rate

def _goals_category_success() -> list[tuple[str, int, int, float]]:
    """
    –°—á–∏—Ç–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞–¥–∞—á:
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ [(–∫–∞—Ç–µ–≥–æ—Ä–∏—è, done, failed, success%)].
    """
    goals = st.session_state.get("goals", [])
    by_cat_done = {}
    by_cat_fail = {}
    for g in goals:
        cat = g.get("category", "–ü—Ä–æ—á–µ–µ")
        if g.get("done"):
            by_cat_done[cat] = by_cat_done.get(cat, 0) + 1
        elif g.get("failed"):
            by_cat_fail[cat] = by_cat_fail.get(cat, 0) + 1
    cats = sorted(set(list(by_cat_done.keys()) + list(by_cat_fail.keys())))
    out = []
    for c in cats:
        d = by_cat_done.get(c, 0)
        f = by_cat_fail.get(c, 0)
        total = d + f
        rate = round((d / total * 100.0), 1) if total > 0 else 0.0
        out.append((c, d, f, rate))
    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —É–±—ã–≤.
    out.sort(key=lambda x: x[3], reverse=True)
    return out

def _xp_last_30_days_summary():
    """–°—Ä–µ–¥–Ω–∏–π XP –∑–∞ 30 –¥–Ω–µ–π –∏ —Ç–æ–ø-3 –¥–Ω—è –ø–æ XP."""
    logs = st.session_state.get("xp_log", {})
    from datetime import timedelta
    vals = []
    for i in range(29, -1, -1):
        d = (date.today() - timedelta(days=i))
        k = d.isoformat()
        vals.append((d, int(logs.get(k, 0))))
    avg = round(sum(v for _, v in vals) / len(vals), 1) if vals else 0.0
    top3 = sorted(vals, key=lambda t: t[1], reverse=True)[:3]
    # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
    top3_fmt = [(d.strftime("%d-%m-%Y"), v) for d, v in top3]
    return avg, top3_fmt

def render_full_stats():
    """–ë–æ–ª—å—à–æ–π –±–ª–æ–∫ '–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' –≤ –ø—Ä–æ—Ñ–∏–ª–µ."""
    st.markdown("### üìà –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

    # 1) –°—Ç—Ä–∏–∫–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
    cur_streak, best_streak = _current_and_best_streak()
    c1, c2, c3 = st.columns(3)
    c1.metric("–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤ (–¥–Ω–µ–π)", cur_streak)
    c2.metric("–õ—É—á—à–∞—è —Å–µ—Ä–∏—è (–¥–Ω–µ–π)", best_streak)
    c3.metric("–î–Ω–µ–π —Å +1 –∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ –≤—Å–µ–≥–æ", len(set(st.session_state.get("discipline_awarded_dates", []))))

    st.divider()

    # 2) –ó–∞–¥–∞—á–∏ (–æ–±—ã—á–Ω—ã–µ)
    gstats = _goals_stats()
    st.markdown("#### ‚úÖ –ó–∞–¥–∞—á–∏")
    cA, cB, cC, cD, cE = st.columns(5)
    cA.metric("–í—Å–µ–≥–æ", gstats["total"])
    cB.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö", gstats["active"])
    cC.metric("–í—ã–ø–æ–ª–Ω–µ–Ω–æ", gstats["done"])
    cD.metric("–ü—Ä–æ–≤–∞–ª–µ–Ω–æ", gstats["failed"])
    cE.metric("–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ", gstats["overdue"])

    col1, col2 = st.columns(2)
    with col1:
        st.caption("–ü–æ —Ç–∏–ø–∞–º")
        st.bar_chart(gstats["by_type"])
    with col2:
        st.caption("–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (—á–∏—Å–ª–æ –∑–∞–¥–∞—á)")
        if gstats["by_cat"]:
            st.bar_chart(gstats["by_cat"])
        else:
            st.info("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")

    # ‚ûï –ù–æ–≤–æ–µ: —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    cat_succ = _goals_category_success()
    if cat_succ:
        st.caption("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ/–ø—Ä–æ–≤–∞–ª–µ–Ω–æ, % —É—Å–ø–µ—Ö–∞)")
        st.dataframe(
            [{"–ö–∞—Ç–µ–≥–æ—Ä–∏—è": c, "–í—ã–ø–æ–ª–Ω–µ–Ω–æ": d, "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ": f, "–£—Å–ø–µ—Ö, %": r} for (c,d,f,r) in cat_succ],
            use_container_width=True,
            hide_index=True
        )

    st.divider()

    # 3) –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏
    bg = _big_goals_stats()
    st.markdown("#### üéØ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏")
    c1, c2, c3, c4, c5 = st.columns(5)
    c1.metric("–í—Å–µ–≥–æ", bg["total"])
    c2.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö", bg["active"])
    c3.metric("–í—ã–ø–æ–ª–Ω–µ–Ω–æ", bg["done"])
    c4.metric("–ü—Ä–æ–≤–∞–ª–µ–Ω–æ", bg["failed"])
    c5.metric("–° –¥–µ–¥–ª–∞–π–Ω–æ–º –≤ –ø—Ä–æ—à–ª–æ–º", bg["past_due"])

    st.divider()

    # 4) –ü—Ä–∏–≤—ã—á–∫–∏
    hst = _habits_stats()
    st.markdown("#### üìÜ –ü—Ä–∏–≤—ã—á–∫–∏")
    c1, c2, c3 = st.columns(3)
    c1.metric("–í—Å–µ–≥–æ –ø—Ä–∏–≤—ã—á–µ–∫", hst["total"])
    c2.metric("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–π –≤—Å–µ–≥–æ", hst["total_done"])
    c3.metric("–ü—Ä–æ–≤–∞–ª–æ–≤ –≤—Å–µ–≥–æ", hst["total_fail"])

    # ‚ûï –ù–æ–≤–æ–µ: —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    week_rate = _habits_week_success()
    if any(v > 0 for v in week_rate.values()):
        st.caption("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏, %")
        week_series = {WEEKDAY_LABELS[i]: week_rate[i] for i in range(7)}
        st.bar_chart(week_series)
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π/–ø—Ä–æ–≤–∞–ª–æ–≤ –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏.")

    # –¢–∞–±–ª–∏—á–∫–∞ –ø–æ –∫–∞–∂–¥–æ–π –ø—Ä–∏–≤—ã—á–∫–µ (—É—Å–ø–µ—Ö % —É–∂–µ –±—ã–ª)
    if hst["per_habit"]:
        rows = [{"–ü—Ä–∏–≤—ã—á–∫–∞": n, "–í—ã–ø–æ–ª–Ω–µ–Ω–æ": d, "–ü—Ä–æ–≤–∞–ª–æ–≤": f, "–£—Å–ø–µ—Ö, %": round(r, 1)} for (n, d, f, r) in hst["per_habit"]]
        st.dataframe(rows, use_container_width=True, hide_index=True)
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º.")

    st.divider()

    # 5) XP –∑–∞ 7 –¥–Ω–µ–π (–∫–∞–∫ –±—ã–ª–æ)
    st.markdown("#### ‚≠ê XP –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π")
    xp7 = _xp_last_7_days()
    st.bar_chart({d: v for (d, v) in xp7})

    # ‚ûï –ù–æ–≤–æ–µ: –°—Ä–µ–¥–Ω–∏–π XP –∑–∞ 30 –¥–Ω–µ–π –∏ –¢–æ–ø-3 –¥–Ω—è
    avg30, top3 = _xp_last_30_days_summary()
    c1, c2 = st.columns(2)
    c1.metric("–°—Ä–µ–¥–Ω–∏–π XP –∑–∞ 30 –¥–Ω–µ–π", avg30)
    if top3:
        c2.markdown("**–¢–æ–ø-3 –¥–Ω—è –ø–æ XP**")
        c2.table([{"–î–∞—Ç–∞": d, "XP": v} for d, v in top3])

def render_profile_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è"""

    render_levelup_modal()

    render_year_reset_modal()

    st.header("üë§ –ü—Ä–æ—Ñ–∏–ª—å")

    # --- –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ---
    st.subheader("üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")

    cols = st.columns(6)
    stats = st.session_state.stats
    keys = ["–ó–¥–æ—Ä–æ–≤—å–µ ‚ù§Ô∏è", "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç üß†", "–†–∞–¥–æ—Å—Ç—å üôÇ", "–û—Ç–Ω–æ—à–µ–Ω–∏—è ü§ù", "–£—Å–ø–µ—Ö ‚≠ê", "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ üéØ"]
    for i, k in enumerate(keys):
        with cols[i]:
            st.metric(k, f"{stats.get(k, 0):.1f}")

    st.divider()

    # --- –û–ø—ã—Ç –∏ —É—Ä–æ–≤–µ–Ω—å ---
    st.subheader("‚≠ê –ü—Ä–æ–≥—Ä–µ—Å—Å")

    xp = st.session_state.xp
    level = st.session_state.level
    st.markdown(f"**–û–ø—ã—Ç (XP):** {xp} / 1000 &nbsp;&nbsp;|&nbsp;&nbsp; **–£—Ä–æ–≤–µ–Ω—å:** {level}")
    st.progress(xp % 1000 / 1000)

    st.divider()

    # --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (–ø–æ –∫–Ω–æ–ø–∫–µ) ---
    if "show_visual" not in st.session_state:
        st.session_state.show_visual = False

    if not st.session_state.show_visual:
        if st.button("üìä –ü–æ–∫–∞–∑–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é", key="show_visual_btn"):
            st.session_state.show_visual = True
            st.rerun()
    else:
        render_progress_section()
        if st.button("üîΩ –°–∫—Ä—ã—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é", key="hide_visual_btn"):
            st.session_state.show_visual = False
            st.rerun()

# –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if "show_full_stats" not in st.session_state:
        st.session_state.show_full_stats = False

    btn_lbl = "üìä –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É" if not st.session_state.show_full_stats else "üîΩ –°–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
    if st.button(btn_lbl, key="toggle_full_stats"):
        st.session_state.show_full_stats = not st.session_state.show_full_stats
        st.rerun()

    if st.session_state.show_full_stats:
        render_full_stats()
        st.divider()
        
def render_goals_page():
    """üéØ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ (–≥–æ–¥–æ–≤—ã–µ)"""
    st.header("üéØ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏")
    render_levelup_modal()

    render_year_reset_modal()

    st.caption("–≠—Ç–æ –±–æ–ª—å—à–∏–µ —Ü–µ–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –≥–æ–¥. –ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: **+250 XP** –∏ **+10 –∫–æ –≤—Å–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º**.")

    # --- –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ---
    if "show_big_goal_form" not in st.session_state:
        st.session_state.show_big_goal_form = False

    if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å", key="btn_show_big_goal_form"):
        st.session_state.show_big_goal_form = not st.session_state.show_big_goal_form
        st.rerun()

    if st.session_state.show_big_goal_form:
        with st.form("add_big_goal_form", clear_on_submit=True):
            title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ü–µ–ª–∏", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –í—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–æ B2")
            due = st.date_input("–î–µ–¥–ª–∞–π–Ω", value=date.today().replace(month=12, day=31))
            note = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ / –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)")
            submitted = st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")

            if submitted:
                if not title.strip():
                    st.warning("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏.")
                else:
                    st.session_state.big_goals.append({
                        "title": title.strip(),
                        "due": due if isinstance(due, date) else date.fromisoformat(str(due)),
                        "done": False,
                        "failed": False,
                        "note": note.strip(),
                    })
                    save_state()
                    st.success("–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ü–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                    st.session_state.show_big_goal_form = False
                    st.rerun()

    st.divider()

    # --- —Å–ø–∏—Å–æ–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π ---
    goals = st.session_state.get("big_goals", [])
    if not goals:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –≤—ã—à–µ üëÜ")
        return

    goals = sorted(goals, key=lambda g: g["due"])

    for g in goals:
        uid = big_goal_uid(g)
        status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞" if g["done"] else ("‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–∞" if g["failed"] else "üü° –í –ø—Ä–æ—Ü–µ—Å—Å–µ")
        due_str = g["due"].strftime("%d-%m-%Y")

        with st.container():
            c1, c2, c3, c4 = st.columns([6, 2, 1, 1])

            with c1:
                st.markdown(f"**{g['title']}**")
                meta = f"üìÖ –î–µ–¥–ª–∞–π–Ω: {due_str} ‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}"
                if g.get("note"):
                    meta += f" ‚Ä¢ üìù {g['note']}"
                st.caption(meta)

            with c2:
                if not g["done"] and not g["failed"]:
                    done_btn = st.button("‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", key=f"big_done_{uid}")
                    fail_btn = st.button("‚ùå –ü—Ä–æ–≤–∞–ª–∏—Ç—å", key=f"big_fail_{uid}")
                else:
                    done_btn = fail_btn = False

            with c3:
                if st.button("üóëÔ∏è", key=f"big_del_{uid}", help="–£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å"):
                    st.session_state.big_goals = [x for x in st.session_state.big_goals if x is not g]
                    save_state()
                    st.rerun()

            with c4:
                new_due = st.date_input("–ù–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω", value=g["due"], key=f"big_due_{uid}")
                if new_due != g["due"]:
                    g["due"] = new_due
                    save_state()

            # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è/–ø—Ä–æ–≤–∞–ª–∞
            if done_btn:
                g["done"] = True
                award_big_goal_completion()
                save_state()
                st.success("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ë–æ–ª—å—à–∞—è —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ üéâ")
                st.rerun()

            if fail_btn:
                g["failed"] = True
                award_big_goal_failure()
                save_state()
                st.warning("–¶–µ–ª—å –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω–∞—è. –®—Ç—Ä–∞—Ñ –ø—Ä–∏–º–µ–Ω—ë–Ω.")
                st.rerun()

def render_habits_page():
    st.header("üìÜ –¢—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫")

    render_levelup_modal()

    render_year_reset_modal()

    if "show_habit_form" not in st.session_state:
        st.session_state.show_habit_form = False

    if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", key="btn_show_habit_form"):
        st.session_state.show_habit_form = not st.session_state.show_habit_form
        st.rerun()

    if st.session_state.show_habit_form:
        with st.form("add_habit_form", clear_on_submit=True):
            title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞")
            days = st.multiselect(
                "–î–Ω–∏ –Ω–µ–¥–µ–ª–∏",
                options=list(range(7)),
                default=[0, 1, 2, 3, 4],
                format_func=lambda i: WEEKDAY_LABELS[i]
            )
            stat = st.selectbox(
                "–ö–∞–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –∫–∞—á–∞–µ—Ç—Å—è:",
                ["–ó–¥–æ—Ä–æ–≤—å–µ ‚ù§Ô∏è","–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç üß†","–†–∞–¥–æ—Å—Ç—å üôÇ","–û—Ç–Ω–æ—à–µ–Ω–∏—è ü§ù","–£—Å–ø–µ—Ö ‚≠ê","–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ üéØ"]
            )
            submitted = st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")

            if submitted:
                if not title.strip():
                    st.warning("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏.")
                elif not days:
                    st.warning("–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏.")
                else:
                    st.session_state.habits.append({
                        "title": title.strip(),
                        "days": days[:],
                        "stat": stat,
                        "completions": [],
                        "failures": [],
                    })
                    save_state()
                    st.success("–ü—Ä–∏–≤—ã—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                    st.session_state.show_habit_form = False
                    st.rerun()

    st.divider()

    # --- —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫ ---
    habits = st.session_state.get("habits", [])
    if not habits:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –≤—ã—à–µ üëÜ")
        return

    # –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
    today = date.today()
    today_label = WEEKDAY_LABELS[today.weekday()]

    for h in habits:
        uid = habit_uid(h)
        scheduled_today = is_habit_scheduled_today(h, today)
        done_today = habit_done_on_date(h, today)
        failed_today = habit_failed_on_date(h, today)

        # —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        if not scheduled_today:
            status_label = "‚Äî —Å–µ–≥–æ–¥–Ω—è –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞"
            status_style = "‚ö™"
        elif done_today:
            status_label = "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ"
            status_style = "üü¢"
        elif failed_today:
            status_label = "–ø—Ä–æ–≤–∞–ª–µ–Ω–∞ ‚ùå"
            status_style = "üî¥"
        else:
            status_label = "–æ–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
            status_style = "üü°"

        # –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        c1, c2, c3, c4, c5 = st.columns([5, 3, 1, 1, 1])

        with c1:
            days_str = ", ".join(WEEKDAY_LABELS[i] for i in h.get("days", []))
            st.markdown(
                f"**{h['title']}** {status_style}  \n"
                f"–°–µ–≥–æ–¥–Ω—è: {status_label}  \n"
                f"–î–Ω–∏: {days_str}  \n"
                f"–°—Ç–∞—Ç: {h.get('stat','')}"
            )

        with c2:
            if scheduled_today and not done_today and not failed_today:
                st.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {today_label}")

        with c3:
            if st.button("‚úÖ", key=f"h_done_{uid}", help="–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Å–µ–≥–æ–¥–Ω—è", use_container_width=True):
                habit_mark_done(h, today)
                d = today.isoformat()
                if d in h["failures"]:
                    h["failures"].remove(d)
                save_state()
                st.rerun()

        with c4:
            if st.button("‚ùå", key=f"h_fail_{uid}", help="–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω–æ–π —Å–µ–≥–æ–¥–Ω—è", use_container_width=True):
                habit_mark_failed(h, today)
                d = today.isoformat()
                if d in h["completions"]:
                    h["completions"].remove(d)
                save_state()
                st.rerun()

        with c5:
            if st.button("üóëÔ∏è", key=f"h_del_{uid}", help="–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", use_container_width=True):
                st.session_state.habits = [x for x in st.session_state.habits if x is not h]
                save_state()
                st.rerun()

# ---------- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ï–°–°–ò–ò –ò –ê–í–¢–û-–ü–†–û–¶–ï–°–°–û–í ----------
if "initialized" not in st.session_state:
    loaded = load_state_if_exists()
    if not loaded:
        
        st.session_state.goals = []
        st.session_state.big_goals = []
        st.session_state.habits = []
        st.session_state.xp = 0
        st.session_state.level = 1
        st.session_state.setdefault("levelup_pending", False)
        st.session_state.setdefault("levelup_to", st.session_state.get("level", 1))
        st.session_state.setdefault("last_reset_year", None)
        st.session_state.setdefault("year_reset_pending", False)       # –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª–∫—É
        st.session_state.setdefault("yearly_report_path", None)        # –ø—É—Ç—å –∫ xlsx, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏–º –Ω–∞ –¥–∏—Å–∫ (–Ω–µ –æ–±—è–∑.)
        st.session_state.setdefault("yearly_report_year", None)
        st.session_state.stats = {
            "–ó–¥–æ—Ä–æ–≤—å–µ ‚ù§Ô∏è": 0,
            "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç üß†": 0,
            "–†–∞–¥–æ—Å—Ç—å üôÇ": 0,
            "–û—Ç–Ω–æ—à–µ–Ω–∏—è ü§ù": 0,
            "–£—Å–ø–µ—Ö ‚≠ê": 0,
            "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ üéØ": 0.0,
        }
        st.session_state.xp_log = {}
        st.session_state.discipline_awarded_dates = []
    else:
        # –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
        if "goals" not in st.session_state:
            st.session_state.goals = []
        if "big_goals" not in st.session_state or st.session_state.big_goals is None:
            st.session_state.big_goals = []
        if "habits" not in st.session_state or st.session_state.habits is None:
            st.session_state.habits = []
        if "xp" not in st.session_state:
            st.session_state.xp = 0
        if "level" not in st.session_state:
            st.session_state.level = 1
        if "stats" not in st.session_state:
            st.session_state.stats = {
                "–ó–¥–æ—Ä–æ–≤—å–µ ‚ù§Ô∏è": 0,
                "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç üß†": 0,
                "–†–∞–¥–æ—Å—Ç—å üôÇ": 0,
                "–û—Ç–Ω–æ—à–µ–Ω–∏—è ü§ù": 0,
                "–£—Å–ø–µ—Ö ‚≠ê": 0,
                "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ üéØ": 0.0,
            }
        if "xp_log" not in st.session_state or st.session_state.xp_log is None:
            st.session_state.xp_log = {}
        if "discipline_awarded_dates" not in st.session_state:
            st.session_state.discipline_awarded_dates = []

    # –æ–±—â–∏–µ —Å–ª—É–∂–µ–±–Ω—ã–µ –≤–µ—â–∏
    ensure_xp_log_dict()
    st.session_state.setdefault("page", "home")
    st.session_state.setdefault("show_add_form", False)
    st.session_state.setdefault("show_visual", False)
    st.session_state.initialized = True

    # —Å–ª—É–∂–µ–±–Ω—ã–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è —Ç–∏–ø–æ–≤/—Å—Ç—Ä—É–∫—Ç—É—Ä
    ensure_xp_log_dict()

    # UI-—Ñ–ª–∞–≥–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    st.session_state.setdefault("page", "home")          # <‚Äî –í–ê–ñ–ù–û: —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    st.session_state.setdefault("show_add_form", False)  # —Ñ–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–∞ –ì–ª–∞–≤–Ω–æ–π
    st.session_state.setdefault("show_visual", False)    # –ø–æ–∫–∞–∑ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ –ü—Ä–æ—Ñ–∏–ª–µ

    st.session_state.initialized = True

# –∞–≤—Ç–æ-–ø—Ä–æ—Ü–µ—Å—Å—ã (–∫–∞–∂–¥—ã–π –∑–∞–ø—É—Å–∫)
_ensure_discipline_list()
auto_process_overdues()              # —à—Ç—Ä–∞—Ñ—ã/–ø–µ—Ä–µ–Ω–æ—Å—ã –ø–æ –æ–±—ã—á–Ω—ã–º –∑–∞–¥–∞—á–∞–º
auto_award_yesterday_if_ok()         # +1 –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞, –µ—Å–ª–∏ –≤—á–µ—Ä–∞ –≤—Å—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
auto_process_big_goal_overdues()     # —à—Ç—Ä–∞—Ñ/–ø—Ä–æ–≤–∞–ª –¥–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π
auto_check_yearly_reset()            # ‚¨ÖÔ∏è –∑–∞–ø—É—Å–∫ –≥–æ–¥–æ–≤–æ–≥–æ —Å–±—Ä–æ—Å–∞ + –æ—Ç—á—ë—Ç

# —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å "page"
st.session_state.setdefault("page", "home")

# --- –†–û–£–¢–ï–† ---
st.session_state.setdefault("page", "home")
page = st.session_state.page

if page == "home":
    render_home_page()
elif page == "profile":
    render_profile_page()
elif page == "goals":
    render_goals_page()
elif page == "habits":
    render_habits_page()


# ========================= –ù–ò–ñ–ù–Ø–Ø –ù–ê–í–ò–ì–ê–¶–ò–Ø =========================
st.markdown(
    """
<style>
.navbar {
  position: fixed; left: 0; right: 0; bottom: 0;
  padding: 10px 16px;
  background: rgba(32,32,32,0.9);
  border-top: 1px solid rgba(255,255,255,0.1);
  backdrop-filter: blur(6px);
  z-index: 9999;
}
.navbar .label { font-size: 14px; text-align: center; margin-top: 4px; color: #ddd; }
.navbar .active { color: #16c60c; font-weight: 700; }
</style>
""",
    unsafe_allow_html=True,
)
st.markdown('<div class="navbar">', unsafe_allow_html=True)
c1, c2, c3, c4 = st.columns(4)


def nav_button(col, label, icon, target, key):
    with col:
        pressed = st.button(f"{icon} {label}", key=key, use_container_width=True)
        cls = "label active" if st.session_state.page == target else "label"
        st.markdown(f'<div class="{cls}">{label}</div>', unsafe_allow_html=True)
    if pressed:
        st.session_state.page = target
        st.rerun()


nav_button(c1, "–ì–ª–∞–≤–Ω–∞—è", "üè†", "home", "nav_home")
nav_button(c2, "–ü—Ä–æ—Ñ–∏–ª—å", "üë§", "profile", "nav_profile")
nav_button(c3, "–¶–µ–ª–∏", "üéØ", "goals", "nav_goals")
nav_button(c4, "–ü—Ä–∏–≤—ã—á–∫–∏", "üìÜ", "habits", "nav_habits")
st.markdown("</div>", unsafe_allow_html=True)


















